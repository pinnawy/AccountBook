//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountBook.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'ConsumeRecord' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AccountBook.Model")]
    public sealed partial class ConsumeRecord : ComplexObject
    {
        
        private UserInfo _consumer;
        
        private DateTime _consumeTime;
        
        private long _id;
        
        private string _memo;
        
        private decimal _money;
        
        private DateTime _recordTime;
        
        private ConsumeType _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConsumerChanging(UserInfo value);
        partial void OnConsumerChanged();
        partial void OnConsumeTimeChanging(DateTime value);
        partial void OnConsumeTimeChanged();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnMemoChanging(string value);
        partial void OnMemoChanged();
        partial void OnMoneyChanging(decimal value);
        partial void OnMoneyChanged();
        partial void OnRecordTimeChanging(DateTime value);
        partial void OnRecordTimeChanged();
        partial void OnTypeChanging(ConsumeType value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeRecord"/> class.
        /// </summary>
        public ConsumeRecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Consumer' value.
        /// </summary>
        [DataMember()]
        [Display(Description="选择消费支出人", Order=3)]
        public UserInfo Consumer
        {
            get
            {
                return this._consumer;
            }
            set
            {
                if ((this._consumer != value))
                {
                    this.OnConsumerChanging(value);
                    this.RaiseDataMemberChanging("Consumer");
                    this.ValidateProperty("Consumer", value);
                    this._consumer = value;
                    this.RaiseDataMemberChanged("Consumer");
                    this.OnConsumerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConsumeTime' value.
        /// </summary>
        [DataMember()]
        [DataType(DataType.DateTime)]
        [Display(Description="消费时间不能大于当前时间", Order=2)]
        [Required(ErrorMessage="消费时间不能为空")]
        public DateTime ConsumeTime
        {
            get
            {
                return this._consumeTime;
            }
            set
            {
                if ((this._consumeTime != value))
                {
                    this.OnConsumeTimeChanging(value);
                    this.RaiseDataMemberChanging("ConsumeTime");
                    this.ValidateProperty("ConsumeTime", value);
                    this._consumeTime = value;
                    this.RaiseDataMemberChanged("ConsumeTime");
                    this.OnConsumeTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public long Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Memo' value.
        /// </summary>
        [DataMember()]
        [Display(Description="填写消费缘由", Order=4)]
        [Required(ErrorMessage="消费备注不能为空")]
        public string Memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnMemoChanging(value);
                    this.RaiseDataMemberChanging("Memo");
                    this.ValidateProperty("Memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("Memo");
                    this.OnMemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Money' value.
        /// </summary>
        [DataMember()]
        [Display(Description="消费金额不能小于0", Order=1)]
        [Required(ErrorMessage="消费金额不能为空")]
        public decimal Money
        {
            get
            {
                return this._money;
            }
            set
            {
                if ((this._money != value))
                {
                    this.OnMoneyChanging(value);
                    this.RaiseDataMemberChanging("Money");
                    this.ValidateProperty("Money", value);
                    this._money = value;
                    this.RaiseDataMemberChanged("Money");
                    this.OnMoneyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordTime' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public DateTime RecordTime
        {
            get
            {
                return this._recordTime;
            }
            set
            {
                if ((this._recordTime != value))
                {
                    this.OnRecordTimeChanging(value);
                    this.RaiseDataMemberChanging("RecordTime");
                    this.ValidateProperty("RecordTime", value);
                    this._recordTime = value;
                    this.RaiseDataMemberChanged("RecordTime");
                    this.OnRecordTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [Display(Order=0)]
        [Required(ErrorMessage="消费类别不能为空")]
        public ConsumeType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ConsumeRecordQueryOption' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AccountBook.Model")]
    public sealed partial class ConsumeRecordQueryOption : ComplexObject
    {
        
        private DateTime _beginTime;
        
        private ConsumeType _consumeType;
        
        private DateTime _endTime;
        
        private int _pageIndex;
        
        private int _pageSize;
        
        private SortDir _sortDir;
        
        private string _sortName;
        
        private long _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBeginTimeChanging(DateTime value);
        partial void OnBeginTimeChanged();
        partial void OnConsumeTypeChanging(ConsumeType value);
        partial void OnConsumeTypeChanged();
        partial void OnEndTimeChanging(DateTime value);
        partial void OnEndTimeChanged();
        partial void OnPageIndexChanging(int value);
        partial void OnPageIndexChanged();
        partial void OnPageSizeChanging(int value);
        partial void OnPageSizeChanged();
        partial void OnSortDirChanging(SortDir value);
        partial void OnSortDirChanged();
        partial void OnSortNameChanging(string value);
        partial void OnSortNameChanged();
        partial void OnUserIdChanging(long value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeRecordQueryOption"/> class.
        /// </summary>
        public ConsumeRecordQueryOption()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BeginTime' value.
        /// </summary>
        [DataMember()]
        public DateTime BeginTime
        {
            get
            {
                return this._beginTime;
            }
            set
            {
                if ((this._beginTime != value))
                {
                    this.OnBeginTimeChanging(value);
                    this.RaiseDataMemberChanging("BeginTime");
                    this.ValidateProperty("BeginTime", value);
                    this._beginTime = value;
                    this.RaiseDataMemberChanged("BeginTime");
                    this.OnBeginTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConsumeType' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public ConsumeType ConsumeType
        {
            get
            {
                return this._consumeType;
            }
            set
            {
                if ((this._consumeType != value))
                {
                    this.OnConsumeTypeChanging(value);
                    this.RaiseDataMemberChanging("ConsumeType");
                    this.ValidateProperty("ConsumeType", value);
                    this._consumeType = value;
                    this.RaiseDataMemberChanged("ConsumeType");
                    this.OnConsumeTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndTime' value.
        /// </summary>
        [DataMember()]
        public DateTime EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.RaiseDataMemberChanging("EndTime");
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaiseDataMemberChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PageIndex' value.
        /// </summary>
        [DataMember()]
        public int PageIndex
        {
            get
            {
                return this._pageIndex;
            }
            set
            {
                if ((this._pageIndex != value))
                {
                    this.OnPageIndexChanging(value);
                    this.RaiseDataMemberChanging("PageIndex");
                    this.ValidateProperty("PageIndex", value);
                    this._pageIndex = value;
                    this.RaiseDataMemberChanged("PageIndex");
                    this.OnPageIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PageSize' value.
        /// </summary>
        [DataMember()]
        public int PageSize
        {
            get
            {
                return this._pageSize;
            }
            set
            {
                if ((this._pageSize != value))
                {
                    this.OnPageSizeChanging(value);
                    this.RaiseDataMemberChanging("PageSize");
                    this.ValidateProperty("PageSize", value);
                    this._pageSize = value;
                    this.RaiseDataMemberChanged("PageSize");
                    this.OnPageSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortDir' value.
        /// </summary>
        [DataMember()]
        public SortDir SortDir
        {
            get
            {
                return this._sortDir;
            }
            set
            {
                if ((this._sortDir != value))
                {
                    this.OnSortDirChanging(value);
                    this.RaiseDataMemberChanging("SortDir");
                    this.ValidateProperty("SortDir", value);
                    this._sortDir = value;
                    this.RaiseDataMemberChanged("SortDir");
                    this.OnSortDirChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortName' value.
        /// </summary>
        [DataMember()]
        public string SortName
        {
            get
            {
                return this._sortName;
            }
            set
            {
                if ((this._sortName != value))
                {
                    this.OnSortNameChanging(value);
                    this.RaiseDataMemberChanging("SortName");
                    this.ValidateProperty("SortName", value);
                    this._sortName = value;
                    this.RaiseDataMemberChanged("SortName");
                    this.OnSortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        public long UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ConsumeRecordsResult' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AccountBook.Model")]
    public sealed partial class ConsumeRecordsResult : ComplexObject
    {
        
        private List<ConsumeRecord> _records;
        
        private int _totalCount;
        
        private decimal _totalMoney;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRecordsChanging(List<ConsumeRecord> value);
        partial void OnRecordsChanged();
        partial void OnTotalCountChanging(int value);
        partial void OnTotalCountChanged();
        partial void OnTotalMoneyChanging(decimal value);
        partial void OnTotalMoneyChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeRecordsResult"/> class.
        /// </summary>
        public ConsumeRecordsResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Records' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<ConsumeRecord> Records
        {
            get
            {
                return this._records;
            }
            set
            {
                if ((this._records != value))
                {
                    this.OnRecordsChanging(value);
                    this.RaiseDataMemberChanging("Records");
                    this.ValidateProperty("Records", value);
                    this._records = value;
                    this.RaiseDataMemberChanged("Records");
                    this.OnRecordsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalCount' value.
        /// </summary>
        [DataMember()]
        public int TotalCount
        {
            get
            {
                return this._totalCount;
            }
            set
            {
                if ((this._totalCount != value))
                {
                    this.OnTotalCountChanging(value);
                    this.RaiseDataMemberChanging("TotalCount");
                    this.ValidateProperty("TotalCount", value);
                    this._totalCount = value;
                    this.RaiseDataMemberChanged("TotalCount");
                    this.OnTotalCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalMoney' value.
        /// </summary>
        [DataMember()]
        public decimal TotalMoney
        {
            get
            {
                return this._totalMoney;
            }
            set
            {
                if ((this._totalMoney != value))
                {
                    this.OnTotalMoneyChanging(value);
                    this.RaiseDataMemberChanging("TotalMoney");
                    this.ValidateProperty("TotalMoney", value);
                    this._totalMoney = value;
                    this.RaiseDataMemberChanged("TotalMoney");
                    this.OnTotalMoneyChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ConsumeType' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AccountBook.Model")]
    public sealed partial class ConsumeType : ComplexObject
    {
        
        private long _parentTypeId;
        
        private string _parentTypeName;
        
        private long _typeId;
        
        private string _typeName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnParentTypeIdChanging(long value);
        partial void OnParentTypeIdChanged();
        partial void OnParentTypeNameChanging(string value);
        partial void OnParentTypeNameChanged();
        partial void OnTypeIdChanging(long value);
        partial void OnTypeIdChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeType"/> class.
        /// </summary>
        public ConsumeType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ParentTypeId' value.
        /// </summary>
        [DataMember()]
        public long ParentTypeId
        {
            get
            {
                return this._parentTypeId;
            }
            set
            {
                if ((this._parentTypeId != value))
                {
                    this.OnParentTypeIdChanging(value);
                    this.RaiseDataMemberChanging("ParentTypeId");
                    this.ValidateProperty("ParentTypeId", value);
                    this._parentTypeId = value;
                    this.RaiseDataMemberChanged("ParentTypeId");
                    this.OnParentTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentTypeName' value.
        /// </summary>
        [DataMember()]
        public string ParentTypeName
        {
            get
            {
                return this._parentTypeName;
            }
            set
            {
                if ((this._parentTypeName != value))
                {
                    this.OnParentTypeNameChanging(value);
                    this.RaiseDataMemberChanging("ParentTypeName");
                    this.ValidateProperty("ParentTypeName", value);
                    this._parentTypeName = value;
                    this.RaiseDataMemberChanged("ParentTypeName");
                    this.OnParentTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeId' value.
        /// </summary>
        [DataMember()]
        public long TypeId
        {
            get
            {
                return this._typeId;
            }
            set
            {
                if ((this._typeId != value))
                {
                    this.OnTypeIdChanging(value);
                    this.RaiseDataMemberChanging("TypeId");
                    this.ValidateProperty("TypeId", value);
                    this._typeId = value;
                    this.RaiseDataMemberChanged("TypeId");
                    this.OnTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeName' value.
        /// </summary>
        [DataMember()]
        public string TypeName
        {
            get
            {
                return this._typeName;
            }
            set
            {
                if ((this._typeName != value))
                {
                    this.OnTypeNameChanging(value);
                    this.RaiseDataMemberChanging("TypeName");
                    this.ValidateProperty("TypeName", value);
                    this._typeName = value;
                    this.RaiseDataMemberChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }
    }
    
    public enum SortDir
    {
        
        ASC = 0,
        
        DESC = 1,
    }
    
    /// <summary>
    /// The 'UserInfo' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AccountBook.Model")]
    public sealed partial class UserInfo : ComplexObject
    {
        
        private string _friendlyName;
        
        private long _userId;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnUserIdChanging(long value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo"/> class.
        /// </summary>
        public UserInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        public long UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
}
namespace AccountBook.Silverlight
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using AccountBook.Silverlight.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace AccountBook.Silverlight.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using AccountBook.Model;
    using AccountBook.Silverlight.Web.Resources;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("AccountBook-Silverlight-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'RecordsService' DomainService.
    /// </summary>
    public sealed partial class RecordsContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContext"/> class.
        /// </summary>
        public RecordsContext() : 
                this(new WebDomainClient<IRecordsServiceContract>(new Uri("AccountBook-Silverlight-Web-RecordsService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The RecordsService service URI.</param>
        public RecordsContext(Uri serviceUri) : 
                this(new WebDomainClient<IRecordsServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public RecordsContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddConsumeRecord' method of the DomainService.
        /// </summary>
        /// <param name="record">The value for the 'record' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<long> AddConsumeRecord(ConsumeRecord record, Action<InvokeOperation<long>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("record", record);
            this.ValidateMethod("AddConsumeRecord", parameters);
            return ((InvokeOperation<long>)(this.InvokeOperation("AddConsumeRecord", typeof(long), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddConsumeRecord' method of the DomainService.
        /// </summary>
        /// <param name="record">The value for the 'record' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<long> AddConsumeRecord(ConsumeRecord record)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("record", record);
            this.ValidateMethod("AddConsumeRecord", parameters);
            return ((InvokeOperation<long>)(this.InvokeOperation("AddConsumeRecord", typeof(long), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConsumeRecordList' method of the DomainService.
        /// </summary>
        /// <param name="option">The value for the 'option' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ConsumeRecordsResult> GetConsumeRecordList(ConsumeRecordQueryOption option, Action<InvokeOperation<ConsumeRecordsResult>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("option", option);
            this.ValidateMethod("GetConsumeRecordList", parameters);
            return ((InvokeOperation<ConsumeRecordsResult>)(this.InvokeOperation("GetConsumeRecordList", typeof(ConsumeRecordsResult), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConsumeRecordList' method of the DomainService.
        /// </summary>
        /// <param name="option">The value for the 'option' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ConsumeRecordsResult> GetConsumeRecordList(ConsumeRecordQueryOption option)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("option", option);
            this.ValidateMethod("GetConsumeRecordList", parameters);
            return ((InvokeOperation<ConsumeRecordsResult>)(this.InvokeOperation("GetConsumeRecordList", typeof(ConsumeRecordsResult), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateConsumeRecord' method of the DomainService.
        /// </summary>
        /// <param name="record">The value for the 'record' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateConsumeRecord(ConsumeRecord record, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("record", record);
            this.ValidateMethod("UpdateConsumeRecord", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateConsumeRecord", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateConsumeRecord' method of the DomainService.
        /// </summary>
        /// <param name="record">The value for the 'record' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateConsumeRecord(ConsumeRecord record)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("record", record);
            this.ValidateMethod("UpdateConsumeRecord", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateConsumeRecord", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RecordsContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'RecordsService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IRecordsServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'AddConsumeRecord' operation.
            /// </summary>
            /// <param name="record">The value for the 'record' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RecordsService/AddConsumeRecordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RecordsService/AddConsumeRecord", ReplyAction="http://tempuri.org/RecordsService/AddConsumeRecordResponse")]
            IAsyncResult BeginAddConsumeRecord(ConsumeRecord record, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddConsumeRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddConsumeRecord'.</param>
            /// <returns>The 'Int64' returned from the 'AddConsumeRecord' operation.</returns>
            long EndAddConsumeRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConsumeRecordList' operation.
            /// </summary>
            /// <param name="option">The value for the 'option' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RecordsService/GetConsumeRecordListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RecordsService/GetConsumeRecordList", ReplyAction="http://tempuri.org/RecordsService/GetConsumeRecordListResponse")]
            IAsyncResult BeginGetConsumeRecordList(ConsumeRecordQueryOption option, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConsumeRecordList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConsumeRecordList'.</param>
            /// <returns>The 'ConsumeRecordsResult' returned from the 'GetConsumeRecordList' operation.</returns>
            ConsumeRecordsResult EndGetConsumeRecordList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateConsumeRecord' operation.
            /// </summary>
            /// <param name="record">The value for the 'record' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RecordsService/UpdateConsumeRecordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RecordsService/UpdateConsumeRecord", ReplyAction="http://tempuri.org/RecordsService/UpdateConsumeRecordResponse")]
            IAsyncResult BeginUpdateConsumeRecord(ConsumeRecord record, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateConsumeRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateConsumeRecord'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateConsumeRecord' operation.</returns>
            bool EndUpdateConsumeRecord(IAsyncResult result);
        }
        
        internal sealed class RecordsContextEntityContainer : EntityContainer
        {
            
            public RecordsContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AccountBook.Silverlight.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AccountBook.Silverlight.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserService' DomainService.
    /// </summary>
    public sealed partial class UserContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserContext"/> class.
        /// </summary>
        public UserContext() : 
                this(new WebDomainClient<IUserServiceContract>(new Uri("AccountBook-Silverlight-Web-UserService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserService service URI.</param>
        public UserContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPassword' method of the DomainService.
        /// </summary>
        /// <param name="username">The value for the 'username' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetPassword(string username, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("username", username);
            this.ValidateMethod("GetPassword", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetPassword", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPassword' method of the DomainService.
        /// </summary>
        /// <param name="username">The value for the 'username' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetPassword(string username)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("username", username);
            this.ValidateMethod("GetPassword", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetPassword", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUser' method of the DomainService.
        /// </summary>
        /// <param name="username">The value for the 'username' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserInfo> GetUser(string username, Action<InvokeOperation<UserInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("username", username);
            this.ValidateMethod("GetUser", parameters);
            return ((InvokeOperation<UserInfo>)(this.InvokeOperation("GetUser", typeof(UserInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUser' method of the DomainService.
        /// </summary>
        /// <param name="username">The value for the 'username' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserInfo> GetUser(string username)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("username", username);
            this.ValidateMethod("GetUser", parameters);
            return ((InvokeOperation<UserInfo>)(this.InvokeOperation("GetUser", typeof(UserInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserList' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<UserInfo>> GetUserList(Action<InvokeOperation<List<UserInfo>>> callback, object userState)
        {
            this.ValidateMethod("GetUserList", null);
            return ((InvokeOperation<List<UserInfo>>)(this.InvokeOperation("GetUserList", typeof(List<UserInfo>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserList' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<UserInfo>> GetUserList()
        {
            this.ValidateMethod("GetUserList", null);
            return ((InvokeOperation<List<UserInfo>>)(this.InvokeOperation("GetUserList", typeof(List<UserInfo>), null, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/CreateUser", ReplyAction="http://tempuri.org/UserService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPassword' operation.
            /// </summary>
            /// <param name="username">The value for the 'username' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetPasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetPassword", ReplyAction="http://tempuri.org/UserService/GetPasswordResponse")]
            IAsyncResult BeginGetPassword(string username, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPassword'.</param>
            /// <returns>The 'String' returned from the 'GetPassword' operation.</returns>
            string EndGetPassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="username">The value for the 'username' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetUser", ReplyAction="http://tempuri.org/UserService/GetUserResponse")]
            IAsyncResult BeginGetUser(string username, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'UserInfo' returned from the 'GetUser' operation.</returns>
            UserInfo EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserList' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserService/GetUserListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserService/GetUserList", ReplyAction="http://tempuri.org/UserService/GetUserListResponse")]
            IAsyncResult BeginGetUserList(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserList'.</param>
            /// <returns>The 'List`1' returned from the 'GetUserList' operation.</returns>
            List<UserInfo> EndGetUserList(IAsyncResult result);
        }
        
        internal sealed class UserContextEntityContainer : EntityContainer
        {
            
            public UserContextEntityContainer()
            {
            }
        }
    }
}
namespace AccountBook.Silverlight.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using AccountBook.Model;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'ConsumeTypeService' DomainService.
    /// </summary>
    public sealed partial class ConsumeTypeContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeTypeContext"/> class.
        /// </summary>
        public ConsumeTypeContext() : 
                this(new WebDomainClient<IConsumeTypeServiceContract>(new Uri("AccountBook-Silverlight-Web-Services-ConsumeTypeService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeTypeContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ConsumeTypeService service URI.</param>
        public ConsumeTypeContext(Uri serviceUri) : 
                this(new WebDomainClient<IConsumeTypeServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeTypeContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ConsumeTypeContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConsumeSubTypes' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ConsumeType>> GetConsumeSubTypes(Action<InvokeOperation<List<ConsumeType>>> callback, object userState)
        {
            this.ValidateMethod("GetConsumeSubTypes", null);
            return ((InvokeOperation<List<ConsumeType>>)(this.InvokeOperation("GetConsumeSubTypes", typeof(List<ConsumeType>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConsumeSubTypes' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ConsumeType>> GetConsumeSubTypes()
        {
            this.ValidateMethod("GetConsumeSubTypes", null);
            return ((InvokeOperation<List<ConsumeType>>)(this.InvokeOperation("GetConsumeSubTypes", typeof(List<ConsumeType>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConsumeTypes' method of the DomainService.
        /// </summary>
        /// <param name="parentTypeId">The value for the 'parentTypeId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ConsumeType>> GetConsumeTypes(int parentTypeId, Action<InvokeOperation<List<ConsumeType>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentTypeId", parentTypeId);
            this.ValidateMethod("GetConsumeTypes", parameters);
            return ((InvokeOperation<List<ConsumeType>>)(this.InvokeOperation("GetConsumeTypes", typeof(List<ConsumeType>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConsumeTypes' method of the DomainService.
        /// </summary>
        /// <param name="parentTypeId">The value for the 'parentTypeId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ConsumeType>> GetConsumeTypes(int parentTypeId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentTypeId", parentTypeId);
            this.ValidateMethod("GetConsumeTypes", parameters);
            return ((InvokeOperation<List<ConsumeType>>)(this.InvokeOperation("GetConsumeTypes", typeof(List<ConsumeType>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ConsumeTypeContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ConsumeTypeService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IConsumeTypeServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetConsumeSubTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ConsumeTypeService/GetConsumeSubTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ConsumeTypeService/GetConsumeSubTypes", ReplyAction="http://tempuri.org/ConsumeTypeService/GetConsumeSubTypesResponse")]
            IAsyncResult BeginGetConsumeSubTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConsumeSubTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConsumeSubTypes'.</param>
            /// <returns>The 'List`1' returned from the 'GetConsumeSubTypes' operation.</returns>
            List<ConsumeType> EndGetConsumeSubTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConsumeTypes' operation.
            /// </summary>
            /// <param name="parentTypeId">The value for the 'parentTypeId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ConsumeTypeService/GetConsumeTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ConsumeTypeService/GetConsumeTypes", ReplyAction="http://tempuri.org/ConsumeTypeService/GetConsumeTypesResponse")]
            IAsyncResult BeginGetConsumeTypes(int parentTypeId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConsumeTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConsumeTypes'.</param>
            /// <returns>The 'List`1' returned from the 'GetConsumeTypes' operation.</returns>
            List<ConsumeType> EndGetConsumeTypes(IAsyncResult result);
        }
        
        internal sealed class ConsumeTypeContextEntityContainer : EntityContainer
        {
            
            public ConsumeTypeContextEntityContainer()
            {
            }
        }
    }
}
